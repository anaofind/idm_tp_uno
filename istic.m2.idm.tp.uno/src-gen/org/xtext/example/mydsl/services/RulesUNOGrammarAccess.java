/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class RulesUNOGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class UnoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Uno");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRUnoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNbJoueurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNbJoueurNbJoueurParserRuleCall_2_0 = (RuleCall)cNbJoueurAssignment_2.eContents().get(0);
		private final Assignment cParticipantTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParticipantTypeParticipantTypeParserRuleCall_3_0 = (RuleCall)cParticipantTypeAssignment_3.eContents().get(0);
		private final Assignment cVariantesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVariantesVariantesParserRuleCall_4_0 = (RuleCall)cVariantesAssignment_4.eContents().get(0);
		private final Assignment cReglesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cReglesReglesParserRuleCall_5_0 = (RuleCall)cReglesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Uno:
		//	'RUno' '{' nbJoueur=NbJoueur participantType=ParticipantType variantes=Variantes regles=Regles? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'RUno' '{' nbJoueur=NbJoueur participantType=ParticipantType variantes=Variantes regles=Regles? '}'
		public Group getGroup() { return cGroup; }
		
		//'RUno'
		public Keyword getRUnoKeyword_0() { return cRUnoKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//nbJoueur=NbJoueur
		public Assignment getNbJoueurAssignment_2() { return cNbJoueurAssignment_2; }
		
		//NbJoueur
		public RuleCall getNbJoueurNbJoueurParserRuleCall_2_0() { return cNbJoueurNbJoueurParserRuleCall_2_0; }
		
		//participantType=ParticipantType
		public Assignment getParticipantTypeAssignment_3() { return cParticipantTypeAssignment_3; }
		
		//ParticipantType
		public RuleCall getParticipantTypeParticipantTypeParserRuleCall_3_0() { return cParticipantTypeParticipantTypeParserRuleCall_3_0; }
		
		//variantes=Variantes
		public Assignment getVariantesAssignment_4() { return cVariantesAssignment_4; }
		
		//Variantes
		public RuleCall getVariantesVariantesParserRuleCall_4_0() { return cVariantesVariantesParserRuleCall_4_0; }
		
		//regles=Regles?
		public Assignment getReglesAssignment_5() { return cReglesAssignment_5; }
		
		//Regles
		public RuleCall getReglesReglesParserRuleCall_5_0() { return cReglesReglesParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParticipantTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.ParticipantType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParticipantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cIdAlternatives_2_0 = (Alternatives)cIdAssignment_2.eContents().get(0);
		private final Keyword cIdEQUIPEKeyword_2_0_0 = (Keyword)cIdAlternatives_2_0.eContents().get(0);
		private final Keyword cIdJOUEURKeyword_2_0_1 = (Keyword)cIdAlternatives_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParticipantType:
		//	'participant' '=' id=('EQUIPE' | 'JOUEUR') ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'participant' '=' id=('EQUIPE' | 'JOUEUR') ';'
		public Group getGroup() { return cGroup; }
		
		//'participant'
		public Keyword getParticipantKeyword_0() { return cParticipantKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//id=('EQUIPE' | 'JOUEUR')
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//('EQUIPE' | 'JOUEUR')
		public Alternatives getIdAlternatives_2_0() { return cIdAlternatives_2_0; }
		
		//'EQUIPE'
		public Keyword getIdEQUIPEKeyword_2_0_0() { return cIdEQUIPEKeyword_2_0_0; }
		
		//'JOUEUR'
		public Keyword getIdJOUEURKeyword_2_0_1() { return cIdJOUEURKeyword_2_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class NbJoueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.NbJoueur");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNb_joueurKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValINTTerminalRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NbJoueur:
		//	'nb_joueur' '=' val=INT ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'nb_joueur' '=' val=INT ';'
		public Group getGroup() { return cGroup; }
		
		//'nb_joueur'
		public Keyword getNb_joueurKeyword_0() { return cNb_joueurKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=INT
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_2_0() { return cValINTTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VariantesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Variantes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVariantesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVariantesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVariantesVarianteParserRuleCall_3_0_0 = (RuleCall)cVariantesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVariantesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVariantesVarianteParserRuleCall_3_1_1_0 = (RuleCall)cVariantesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variantes:
		//	{Variantes} 'variantes' '{' (variantes+=Variante (',' variantes+=Variante)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Variantes} 'variantes' '{' (variantes+=Variante (',' variantes+=Variante)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Variantes}
		public Action getVariantesAction_0() { return cVariantesAction_0; }
		
		//'variantes'
		public Keyword getVariantesKeyword_1() { return cVariantesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(variantes+=Variante (',' variantes+=Variante)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//variantes+=Variante
		public Assignment getVariantesAssignment_3_0() { return cVariantesAssignment_3_0; }
		
		//Variante
		public RuleCall getVariantesVarianteParserRuleCall_3_0_0() { return cVariantesVarianteParserRuleCall_3_0_0; }
		
		//(',' variantes+=Variante)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//variantes+=Variante
		public Assignment getVariantesAssignment_3_1_1() { return cVariantesAssignment_3_1_1; }
		
		//Variante
		public RuleCall getVariantesVarianteParserRuleCall_3_1_1_0() { return cVariantesVarianteParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAffectationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//	Instruction | Condition | Affectation;
		@Override public ParserRule getRule() { return rule; }
		
		//Instruction | Condition | Affectation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Instruction
		public RuleCall getInstructionParserRuleCall_0() { return cInstructionParserRuleCall_0; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }
		
		//Affectation
		public RuleCall getAffectationParserRuleCall_2() { return cAffectationParserRuleCall_2; }
	}
	public class ReglesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Regles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReglesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReglesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_0 = (RuleCall)cDeclarationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Regles:
		//	{Regles} 'regles' '{' declarations+=Declaration* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Regles} 'regles' '{' declarations+=Declaration* '}'
		public Group getGroup() { return cGroup; }
		
		//{Regles}
		public Action getReglesAction_0() { return cReglesAction_0; }
		
		//'regles'
		public Keyword getReglesKeyword_1() { return cReglesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_3() { return cDeclarationsAssignment_3; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_0() { return cDeclarationsDeclarationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributAttributParserRuleCall_0_0 = (RuleCall)cAttributAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionNumeriqueParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Affectation:
		//	attribut=Attribut '=' expression=ExpressionNumerique ';';
		@Override public ParserRule getRule() { return rule; }
		
		//attribut=Attribut '=' expression=ExpressionNumerique ';'
		public Group getGroup() { return cGroup; }
		
		//attribut=Attribut
		public Assignment getAttributAssignment_0() { return cAttributAssignment_0; }
		
		//Attribut
		public RuleCall getAttributAttributParserRuleCall_0_0() { return cAttributAttributParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=ExpressionNumerique
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//ExpressionNumerique
		public RuleCall getExpressionExpressionNumeriqueParserRuleCall_2_0() { return cExpressionExpressionNumeriqueParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionsBlocParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cActionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Instruction:
		//	InstructionsBloc | Action ';';
		@Override public ParserRule getRule() { return rule; }
		
		//InstructionsBloc | Action ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstructionsBloc
		public RuleCall getInstructionsBlocParserRuleCall_0() { return cInstructionsBlocParserRuleCall_0; }
		
		//Action ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//Action
		public RuleCall getActionParserRuleCall_1_0() { return cActionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class InstructionsBlocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.InstructionsBloc");
		private final RuleCall cInstructionChoixParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InstructionsBloc:
		//	InstructionChoix;
		@Override public ParserRule getRule() { return rule; }
		
		//InstructionChoix
		public RuleCall getInstructionChoixParserRuleCall() { return cInstructionChoixParserRuleCall; }
	}
	public class InstructionChoixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.InstructionChoix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstructionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_0 = (RuleCall)cInstructionsAssignment_2.eContents().get(0);
		private final Assignment cInstructionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstructionsInstructionParserRuleCall_3_0 = (RuleCall)cInstructionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InstructionChoix:
		//	'choix' '{' instructions+=Instruction instructions+=Instruction* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'choix' '{' instructions+=Instruction instructions+=Instruction* '}'
		public Group getGroup() { return cGroup; }
		
		//'choix'
		public Keyword getChoixKeyword_0() { return cChoixKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//instructions+=Instruction
		public Assignment getInstructionsAssignment_2() { return cInstructionsAssignment_2; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_0() { return cInstructionsInstructionParserRuleCall_2_0; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_3() { return cInstructionsAssignment_3; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_3_0() { return cInstructionsInstructionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VariableNumeriqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.VariableNumerique");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarAttributParserRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//VariableNumerique:
		//	var=Attribut;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Attribut
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//Attribut
		public RuleCall getVarAttributParserRuleCall_0() { return cVarAttributParserRuleCall_0; }
	}
	public class VariableBooleeneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.VariableBooleene");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarVarianteParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cActionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cActionActionParserRuleCall_1_0 = (RuleCall)cActionAssignment_1.eContents().get(0);
		
		//VariableBooleene:
		//	var=Variante | action=Action;
		@Override public ParserRule getRule() { return rule; }
		
		//var=Variante | action=Action
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=Variante
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//Variante
		public RuleCall getVarVarianteParserRuleCall_0_0() { return cVarVarianteParserRuleCall_0_0; }
		
		//action=Action
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0() { return cActionActionParserRuleCall_1_0; }
	}
	public class VarianteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Variante");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBASEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDEUX_JOUEURSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cUNO_CHALENGEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cEQUIPEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCARTES_IDENTIQUESKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSUITESKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cZERO_ECHANGEKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cZERO_TOURNANTKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cZERO_QUESTIONKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Variante:
		//	'BASE' | 'DEUX_JOUEURS' | 'UNO_CHALENGE' | 'EQUIPE' | 'CARTES_IDENTIQUES' | 'SUITES' | 'ZERO_ECHANGE' |
		//	'ZERO_TOURNANT' | 'ZERO_QUESTION';
		@Override public ParserRule getRule() { return rule; }
		
		//'BASE' | 'DEUX_JOUEURS' | 'UNO_CHALENGE' | 'EQUIPE' | 'CARTES_IDENTIQUES' | 'SUITES' | 'ZERO_ECHANGE' | 'ZERO_TOURNANT'
		//| 'ZERO_QUESTION'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BASE'
		public Keyword getBASEKeyword_0() { return cBASEKeyword_0; }
		
		//'DEUX_JOUEURS'
		public Keyword getDEUX_JOUEURSKeyword_1() { return cDEUX_JOUEURSKeyword_1; }
		
		//'UNO_CHALENGE'
		public Keyword getUNO_CHALENGEKeyword_2() { return cUNO_CHALENGEKeyword_2; }
		
		//'EQUIPE'
		public Keyword getEQUIPEKeyword_3() { return cEQUIPEKeyword_3; }
		
		//'CARTES_IDENTIQUES'
		public Keyword getCARTES_IDENTIQUESKeyword_4() { return cCARTES_IDENTIQUESKeyword_4; }
		
		//'SUITES'
		public Keyword getSUITESKeyword_5() { return cSUITESKeyword_5; }
		
		//'ZERO_ECHANGE'
		public Keyword getZERO_ECHANGEKeyword_6() { return cZERO_ECHANGEKeyword_6; }
		
		//'ZERO_TOURNANT'
		public Keyword getZERO_TOURNANTKeyword_7() { return cZERO_TOURNANTKeyword_7; }
		
		//'ZERO_QUESTION'
		public Keyword getZERO_QUESTIONKeyword_8() { return cZERO_QUESTIONKeyword_8; }
	}
	public class MancheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Manche");
		private final Keyword cMANCHEKeyword = (Keyword)rule.eContents().get(1);
		
		//Manche:
		//	'MANCHE';
		@Override public ParserRule getRule() { return rule; }
		
		//'MANCHE'
		public Keyword getMANCHEKeyword() { return cMANCHEKeyword; }
	}
	public class AttributMancheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.AttributManche");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNB_JOUEURKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNB_PARTICIPANTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AttributManche:
		//	'NB_JOUEUR' | 'NB_PARTICIPANT';
		@Override public ParserRule getRule() { return rule; }
		
		//'NB_JOUEUR' | 'NB_PARTICIPANT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NB_JOUEUR'
		public Keyword getNB_JOUEURKeyword_0() { return cNB_JOUEURKeyword_0; }
		
		//'NB_PARTICIPANT'
		public Keyword getNB_PARTICIPANTKeyword_1() { return cNB_PARTICIPANTKeyword_1; }
	}
	public class ActionMancheElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.ActionManche");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFINIRKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNOUVELLEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ActionManche:
		//	'FINIR' | 'NOUVELLE';
		@Override public ParserRule getRule() { return rule; }
		
		//'FINIR' | 'NOUVELLE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'FINIR'
		public Keyword getFINIRKeyword_0() { return cFINIRKeyword_0; }
		
		//'NOUVELLE'
		public Keyword getNOUVELLEKeyword_1() { return cNOUVELLEKeyword_1; }
	}
	public class JoueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Joueur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cJOUEUR_COURRANTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJOUEUR_SUIVANTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJOUEUR_TOUSKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cJOUEUR_AUTREKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cJOUEUR_EXISTEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cJOUEUR_SELECTIONNEKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Joueur:
		//	'JOUEUR_COURRANT' | 'JOUEUR_SUIVANT' | 'JOUEUR_TOUS' | 'JOUEUR_AUTRE' | 'JOUEUR_EXISTE' | 'JOUEUR_SELECTIONNE';
		@Override public ParserRule getRule() { return rule; }
		
		//'JOUEUR_COURRANT' | 'JOUEUR_SUIVANT' | 'JOUEUR_TOUS' | 'JOUEUR_AUTRE' | 'JOUEUR_EXISTE' | 'JOUEUR_SELECTIONNE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'JOUEUR_COURRANT'
		public Keyword getJOUEUR_COURRANTKeyword_0() { return cJOUEUR_COURRANTKeyword_0; }
		
		//'JOUEUR_SUIVANT'
		public Keyword getJOUEUR_SUIVANTKeyword_1() { return cJOUEUR_SUIVANTKeyword_1; }
		
		//'JOUEUR_TOUS'
		public Keyword getJOUEUR_TOUSKeyword_2() { return cJOUEUR_TOUSKeyword_2; }
		
		//'JOUEUR_AUTRE'
		public Keyword getJOUEUR_AUTREKeyword_3() { return cJOUEUR_AUTREKeyword_3; }
		
		//'JOUEUR_EXISTE'
		public Keyword getJOUEUR_EXISTEKeyword_4() { return cJOUEUR_EXISTEKeyword_4; }
		
		//'JOUEUR_SELECTIONNE'
		public Keyword getJOUEUR_SELECTIONNEKeyword_5() { return cJOUEUR_SELECTIONNEKeyword_5; }
	}
	public class ActionJoueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.ActionJoueur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCRIER_UNOKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJOUER_CARTE_BASEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJOUER_CARTE_JOKERKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cJOUER_CARTE_INVERSER_SENSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cJOUER_CARTE_PASSE_TON_TOURKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cJOUER_CARTE_PLUS_2Keyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cJOUER_CARTE_PLUS_4Keyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cJOUER_PLUSIEURS_CARTES_IDENTIQUESKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cJOUER_CARTE_ZEROKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cJOUER_SUITE_DE_CARTESKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cPOSER_QUESTIONKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cREJOUERKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPASSER_SON_TOURKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cCHANGER_COULEURKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cCHOISIR_COULEURKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cPIOCHER_2_CARTESKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cPIOCHER_4_CARTESKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cINVERSER_SENSKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cDONNER_CARTES_AU_JOUEUR_SUIVANTKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cECHANGER_JEU_AVEC_UN_ADVERSAIREKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cREMARQUER_ERREUR_UNOKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//ActionJoueur:
		//	'CRIER_UNO' |
		//	'JOUER_CARTE_BASE' |
		//	'JOUER_CARTE_JOKER' |
		//	'JOUER_CARTE_INVERSER_SENS' |
		//	'JOUER_CARTE_PASSE_TON_TOUR' |
		//	'JOUER_CARTE_PLUS_2' |
		//	'JOUER_CARTE_PLUS_4' |
		//	'JOUER_PLUSIEURS_CARTES_IDENTIQUES' |
		//	'JOUER_CARTE_ZERO' |
		//	'JOUER_SUITE_DE_CARTES' |
		//	'POSER_QUESTION' |
		//	'REJOUER' |
		//	'PASSER_SON_TOUR' |
		//	'CHANGER_COULEUR' |
		//	'CHOISIR_COULEUR' |
		//	'PIOCHER_2_CARTES' |
		//	'PIOCHER_4_CARTES' |
		//	'INVERSER_SENS' |
		//	'DONNER_CARTES_AU_JOUEUR_SUIVANT' |
		//	'ECHANGER_JEU_AVEC_UN_ADVERSAIRE' |
		//	'REMARQUER_ERREUR_UNO';
		@Override public ParserRule getRule() { return rule; }
		
		//'CRIER_UNO' | 'JOUER_CARTE_BASE' | 'JOUER_CARTE_JOKER' | 'JOUER_CARTE_INVERSER_SENS' | 'JOUER_CARTE_PASSE_TON_TOUR' |
		//'JOUER_CARTE_PLUS_2' | 'JOUER_CARTE_PLUS_4' | 'JOUER_PLUSIEURS_CARTES_IDENTIQUES' | 'JOUER_CARTE_ZERO' |
		//'JOUER_SUITE_DE_CARTES' | 'POSER_QUESTION' | 'REJOUER' | 'PASSER_SON_TOUR' | 'CHANGER_COULEUR' | 'CHOISIR_COULEUR' |
		//'PIOCHER_2_CARTES' | 'PIOCHER_4_CARTES' | 'INVERSER_SENS' | 'DONNER_CARTES_AU_JOUEUR_SUIVANT' |
		//'ECHANGER_JEU_AVEC_UN_ADVERSAIRE' | 'REMARQUER_ERREUR_UNO'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CRIER_UNO'
		public Keyword getCRIER_UNOKeyword_0() { return cCRIER_UNOKeyword_0; }
		
		//'JOUER_CARTE_BASE'
		public Keyword getJOUER_CARTE_BASEKeyword_1() { return cJOUER_CARTE_BASEKeyword_1; }
		
		//'JOUER_CARTE_JOKER'
		public Keyword getJOUER_CARTE_JOKERKeyword_2() { return cJOUER_CARTE_JOKERKeyword_2; }
		
		//'JOUER_CARTE_INVERSER_SENS'
		public Keyword getJOUER_CARTE_INVERSER_SENSKeyword_3() { return cJOUER_CARTE_INVERSER_SENSKeyword_3; }
		
		//'JOUER_CARTE_PASSE_TON_TOUR'
		public Keyword getJOUER_CARTE_PASSE_TON_TOURKeyword_4() { return cJOUER_CARTE_PASSE_TON_TOURKeyword_4; }
		
		//'JOUER_CARTE_PLUS_2'
		public Keyword getJOUER_CARTE_PLUS_2Keyword_5() { return cJOUER_CARTE_PLUS_2Keyword_5; }
		
		//'JOUER_CARTE_PLUS_4'
		public Keyword getJOUER_CARTE_PLUS_4Keyword_6() { return cJOUER_CARTE_PLUS_4Keyword_6; }
		
		//'JOUER_PLUSIEURS_CARTES_IDENTIQUES'
		public Keyword getJOUER_PLUSIEURS_CARTES_IDENTIQUESKeyword_7() { return cJOUER_PLUSIEURS_CARTES_IDENTIQUESKeyword_7; }
		
		//'JOUER_CARTE_ZERO'
		public Keyword getJOUER_CARTE_ZEROKeyword_8() { return cJOUER_CARTE_ZEROKeyword_8; }
		
		//'JOUER_SUITE_DE_CARTES'
		public Keyword getJOUER_SUITE_DE_CARTESKeyword_9() { return cJOUER_SUITE_DE_CARTESKeyword_9; }
		
		//'POSER_QUESTION'
		public Keyword getPOSER_QUESTIONKeyword_10() { return cPOSER_QUESTIONKeyword_10; }
		
		//'REJOUER'
		public Keyword getREJOUERKeyword_11() { return cREJOUERKeyword_11; }
		
		//'PASSER_SON_TOUR'
		public Keyword getPASSER_SON_TOURKeyword_12() { return cPASSER_SON_TOURKeyword_12; }
		
		//'CHANGER_COULEUR'
		public Keyword getCHANGER_COULEURKeyword_13() { return cCHANGER_COULEURKeyword_13; }
		
		//'CHOISIR_COULEUR'
		public Keyword getCHOISIR_COULEURKeyword_14() { return cCHOISIR_COULEURKeyword_14; }
		
		//'PIOCHER_2_CARTES'
		public Keyword getPIOCHER_2_CARTESKeyword_15() { return cPIOCHER_2_CARTESKeyword_15; }
		
		//'PIOCHER_4_CARTES'
		public Keyword getPIOCHER_4_CARTESKeyword_16() { return cPIOCHER_4_CARTESKeyword_16; }
		
		//'INVERSER_SENS'
		public Keyword getINVERSER_SENSKeyword_17() { return cINVERSER_SENSKeyword_17; }
		
		//'DONNER_CARTES_AU_JOUEUR_SUIVANT'
		public Keyword getDONNER_CARTES_AU_JOUEUR_SUIVANTKeyword_18() { return cDONNER_CARTES_AU_JOUEUR_SUIVANTKeyword_18; }
		
		//'ECHANGER_JEU_AVEC_UN_ADVERSAIRE'
		public Keyword getECHANGER_JEU_AVEC_UN_ADVERSAIREKeyword_19() { return cECHANGER_JEU_AVEC_UN_ADVERSAIREKeyword_19; }
		
		//'REMARQUER_ERREUR_UNO'
		public Keyword getREMARQUER_ERREUR_UNOKeyword_20() { return cREMARQUER_ERREUR_UNOKeyword_20; }
	}
	public class AttributJoueurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.AttributJoueur");
		private final Keyword cNB_CARTESKeyword = (Keyword)rule.eContents().get(1);
		
		//AttributJoueur:
		//	'NB_CARTES';
		@Override public ParserRule getRule() { return rule; }
		
		//'NB_CARTES'
		public Keyword getNB_CARTESKeyword() { return cNB_CARTESKeyword; }
	}
	public class ParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Participant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPARTICIPANT_COURRANTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPARTICIPANT_EXISTEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPARTICIPANT_SELECTIONNEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPARTICIPANT_MIN_POINTSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Participant:
		//	'PARTICIPANT_COURRANT' | 'PARTICIPANT_EXISTE' | 'PARTICIPANT_SELECTIONNE' | 'PARTICIPANT_MIN_POINTS';
		@Override public ParserRule getRule() { return rule; }
		
		//'PARTICIPANT_COURRANT' | 'PARTICIPANT_EXISTE' | 'PARTICIPANT_SELECTIONNE' | 'PARTICIPANT_MIN_POINTS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'PARTICIPANT_COURRANT'
		public Keyword getPARTICIPANT_COURRANTKeyword_0() { return cPARTICIPANT_COURRANTKeyword_0; }
		
		//'PARTICIPANT_EXISTE'
		public Keyword getPARTICIPANT_EXISTEKeyword_1() { return cPARTICIPANT_EXISTEKeyword_1; }
		
		//'PARTICIPANT_SELECTIONNE'
		public Keyword getPARTICIPANT_SELECTIONNEKeyword_2() { return cPARTICIPANT_SELECTIONNEKeyword_2; }
		
		//'PARTICIPANT_MIN_POINTS'
		public Keyword getPARTICIPANT_MIN_POINTSKeyword_3() { return cPARTICIPANT_MIN_POINTSKeyword_3; }
	}
	public class ActionParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.ActionParticipant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGAGNERKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPERDREKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cETRE_ELIMINEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ActionParticipant:
		//	'GAGNER' | 'PERDRE' | 'ETRE_ELIMINE';
		@Override public ParserRule getRule() { return rule; }
		
		//'GAGNER' | 'PERDRE' | 'ETRE_ELIMINE'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'GAGNER'
		public Keyword getGAGNERKeyword_0() { return cGAGNERKeyword_0; }
		
		//'PERDRE'
		public Keyword getPERDREKeyword_1() { return cPERDREKeyword_1; }
		
		//'ETRE_ELIMINE'
		public Keyword getETRE_ELIMINEKeyword_2() { return cETRE_ELIMINEKeyword_2; }
	}
	public class AttributParticipantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.AttributParticipant");
		private final Keyword cPOINTSKeyword = (Keyword)rule.eContents().get(1);
		
		//AttributParticipant:
		//	'POINTS';
		@Override public ParserRule getRule() { return rule; }
		
		//'POINTS'
		public Keyword getPOINTSKeyword() { return cPOINTSKeyword; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdJoueurParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cActionActionJoueurParserRuleCall_0_2_0 = (RuleCall)cActionAssignment_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdMancheParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cActionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cActionActionMancheParserRuleCall_1_2_0 = (RuleCall)cActionAssignment_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdParticipantParserRuleCall_2_0_0 = (RuleCall)cIdAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cActionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cActionActionParticipantParserRuleCall_2_2_0 = (RuleCall)cActionAssignment_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Action:
		//	id=Joueur '.' action=ActionJoueur '()' | id=Manche '.' action=ActionManche '()' | id=Participant '.'
		//	action=ActionParticipant '()';
		@Override public ParserRule getRule() { return rule; }
		
		//id=Joueur '.' action=ActionJoueur '()' | id=Manche '.' action=ActionManche '()' | id=Participant '.'
		//action=ActionParticipant '()'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=Joueur '.' action=ActionJoueur '()'
		public Group getGroup_0() { return cGroup_0; }
		
		//id=Joueur
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//Joueur
		public RuleCall getIdJoueurParserRuleCall_0_0_0() { return cIdJoueurParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//action=ActionJoueur
		public Assignment getActionAssignment_0_2() { return cActionAssignment_0_2; }
		
		//ActionJoueur
		public RuleCall getActionActionJoueurParserRuleCall_0_2_0() { return cActionActionJoueurParserRuleCall_0_2_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_0_3() { return cLeftParenthesisRightParenthesisKeyword_0_3; }
		
		//id=Manche '.' action=ActionManche '()'
		public Group getGroup_1() { return cGroup_1; }
		
		//id=Manche
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//Manche
		public RuleCall getIdMancheParserRuleCall_1_0_0() { return cIdMancheParserRuleCall_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//action=ActionManche
		public Assignment getActionAssignment_1_2() { return cActionAssignment_1_2; }
		
		//ActionManche
		public RuleCall getActionActionMancheParserRuleCall_1_2_0() { return cActionActionMancheParserRuleCall_1_2_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_3() { return cLeftParenthesisRightParenthesisKeyword_1_3; }
		
		//id=Participant '.' action=ActionParticipant '()'
		public Group getGroup_2() { return cGroup_2; }
		
		//id=Participant
		public Assignment getIdAssignment_2_0() { return cIdAssignment_2_0; }
		
		//Participant
		public RuleCall getIdParticipantParserRuleCall_2_0_0() { return cIdParticipantParserRuleCall_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//action=ActionParticipant
		public Assignment getActionAssignment_2_2() { return cActionAssignment_2_2; }
		
		//ActionParticipant
		public RuleCall getActionActionParticipantParserRuleCall_2_2_0() { return cActionActionParticipantParserRuleCall_2_2_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_2_3() { return cLeftParenthesisRightParenthesisKeyword_2_3; }
	}
	public class AttributElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Attribut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdJoueurParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAttributAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAttributAttributJoueurParserRuleCall_0_2_0 = (RuleCall)cAttributAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIdMancheParserRuleCall_1_0_0 = (RuleCall)cIdAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAttributAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAttributAttributMancheParserRuleCall_1_2_0 = (RuleCall)cAttributAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cIdAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cIdParticipantParserRuleCall_2_0_0 = (RuleCall)cIdAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAttributAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAttributAttributParticipantParserRuleCall_2_2_0 = (RuleCall)cAttributAssignment_2_2.eContents().get(0);
		
		//Attribut:
		//	id=Joueur '.' attribut=AttributJoueur | id=Manche '.' attribut=AttributManche | id=Participant '.'
		//	attribut=AttributParticipant;
		@Override public ParserRule getRule() { return rule; }
		
		//id=Joueur '.' attribut=AttributJoueur | id=Manche '.' attribut=AttributManche | id=Participant '.'
		//attribut=AttributParticipant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//id=Joueur '.' attribut=AttributJoueur
		public Group getGroup_0() { return cGroup_0; }
		
		//id=Joueur
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//Joueur
		public RuleCall getIdJoueurParserRuleCall_0_0_0() { return cIdJoueurParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//attribut=AttributJoueur
		public Assignment getAttributAssignment_0_2() { return cAttributAssignment_0_2; }
		
		//AttributJoueur
		public RuleCall getAttributAttributJoueurParserRuleCall_0_2_0() { return cAttributAttributJoueurParserRuleCall_0_2_0; }
		
		//id=Manche '.' attribut=AttributManche
		public Group getGroup_1() { return cGroup_1; }
		
		//id=Manche
		public Assignment getIdAssignment_1_0() { return cIdAssignment_1_0; }
		
		//Manche
		public RuleCall getIdMancheParserRuleCall_1_0_0() { return cIdMancheParserRuleCall_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//attribut=AttributManche
		public Assignment getAttributAssignment_1_2() { return cAttributAssignment_1_2; }
		
		//AttributManche
		public RuleCall getAttributAttributMancheParserRuleCall_1_2_0() { return cAttributAttributMancheParserRuleCall_1_2_0; }
		
		//id=Participant '.' attribut=AttributParticipant
		public Group getGroup_2() { return cGroup_2; }
		
		//id=Participant
		public Assignment getIdAssignment_2_0() { return cIdAssignment_2_0; }
		
		//Participant
		public RuleCall getIdParticipantParserRuleCall_2_0_0() { return cIdParticipantParserRuleCall_2_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//attribut=AttributParticipant
		public Assignment getAttributAssignment_2_2() { return cAttributAssignment_2_2; }
		
		//AttributParticipant
		public RuleCall getAttributAttributParticipantParserRuleCall_2_2_0() { return cAttributAttributParticipantParserRuleCall_2_2_0; }
	}
	public class OperateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Operateur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Operateur:
		//	'+' | '-' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class ComparateurElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Comparateur");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Comparateur:
		//	'>' | '<' | '>=' | '<=' | '==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '<' | '>=' | '<=' | '==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	public class LogiqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Logique");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Logique:
		//	'&&' | '||' | '->' | '<->';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&' | '||' | '->' | '<->'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_0() { return cAmpersandAmpersandKeyword_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1() { return cVerticalLineVerticalLineKeyword_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_3() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_3; }
	}
	public class ExpressionNumeriqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.ExpressionNumerique");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpEntierParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpOperateurParserRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpEntierParserRuleCall_1_1_0 = (RuleCall)cExpAssignment_1_1.eContents().get(0);
		
		//ExpressionNumerique:
		//	exp+=Entier (op+=Operateur exp+=Entier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=Entier (op+=Operateur exp+=Entier)*
		public Group getGroup() { return cGroup; }
		
		//exp+=Entier
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//Entier
		public RuleCall getExpEntierParserRuleCall_0_0() { return cExpEntierParserRuleCall_0_0; }
		
		//(op+=Operateur exp+=Entier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//op+=Operateur
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }
		
		//Operateur
		public RuleCall getOpOperateurParserRuleCall_1_0_0() { return cOpOperateurParserRuleCall_1_0_0; }
		
		//exp+=Entier
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//Entier
		public RuleCall getExpEntierParserRuleCall_1_1_0() { return cExpEntierParserRuleCall_1_1_0; }
	}
	public class ExpressionBooleeneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.ExpressionBooleene");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cExpAlternatives_0_0 = (Alternatives)cExpAssignment_0.eContents().get(0);
		private final RuleCall cExpBooleenParserRuleCall_0_0_0 = (RuleCall)cExpAlternatives_0_0.eContents().get(0);
		private final RuleCall cExpBooleanContraireParserRuleCall_0_0_1 = (RuleCall)cExpAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLogAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogLogiqueParserRuleCall_1_0_0 = (RuleCall)cLogAssignment_1_0.eContents().get(0);
		private final Assignment cExpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cExpAlternatives_1_1_0 = (Alternatives)cExpAssignment_1_1.eContents().get(0);
		private final RuleCall cExpBooleenParserRuleCall_1_1_0_0 = (RuleCall)cExpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cExpBooleanContraireParserRuleCall_1_1_0_1 = (RuleCall)cExpAlternatives_1_1_0.eContents().get(1);
		
		//ExpressionBooleene:
		//	exp+=(Booleen | BooleanContraire) (log+=Logique exp+=(Booleen | BooleanContraire))*;
		@Override public ParserRule getRule() { return rule; }
		
		//exp+=(Booleen | BooleanContraire) (log+=Logique exp+=(Booleen | BooleanContraire))*
		public Group getGroup() { return cGroup; }
		
		//exp+=(Booleen | BooleanContraire)
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//(Booleen | BooleanContraire)
		public Alternatives getExpAlternatives_0_0() { return cExpAlternatives_0_0; }
		
		//Booleen
		public RuleCall getExpBooleenParserRuleCall_0_0_0() { return cExpBooleenParserRuleCall_0_0_0; }
		
		//BooleanContraire
		public RuleCall getExpBooleanContraireParserRuleCall_0_0_1() { return cExpBooleanContraireParserRuleCall_0_0_1; }
		
		//(log+=Logique exp+=(Booleen | BooleanContraire))*
		public Group getGroup_1() { return cGroup_1; }
		
		//log+=Logique
		public Assignment getLogAssignment_1_0() { return cLogAssignment_1_0; }
		
		//Logique
		public RuleCall getLogLogiqueParserRuleCall_1_0_0() { return cLogLogiqueParserRuleCall_1_0_0; }
		
		//exp+=(Booleen | BooleanContraire)
		public Assignment getExpAssignment_1_1() { return cExpAssignment_1_1; }
		
		//(Booleen | BooleanContraire)
		public Alternatives getExpAlternatives_1_1_0() { return cExpAlternatives_1_1_0; }
		
		//Booleen
		public RuleCall getExpBooleenParserRuleCall_1_1_0_0() { return cExpBooleenParserRuleCall_1_1_0_0; }
		
		//BooleanContraire
		public RuleCall getExpBooleanContraireParserRuleCall_1_1_0_1() { return cExpBooleanContraireParserRuleCall_1_1_0_1; }
	}
	public class EntierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Entier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Assignment cAttAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAttVariableNumeriqueParserRuleCall_1_0 = (RuleCall)cAttAssignment_1.eContents().get(0);
		
		//Entier:
		//	val=INT | att=VariableNumerique;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT | att=VariableNumerique
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=INT
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }
		
		//att=VariableNumerique
		public Assignment getAttAssignment_1() { return cAttAssignment_1; }
		
		//VariableNumerique
		public RuleCall getAttVariableNumeriqueParserRuleCall_1_0() { return cAttVariableNumeriqueParserRuleCall_1_0; }
	}
	public class BooleenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Booleen");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cValAlternatives_0_0 = (Alternatives)cValAssignment_0.eContents().get(0);
		private final Keyword cValTrueKeyword_0_0_0 = (Keyword)cValAlternatives_0_0.eContents().get(0);
		private final Keyword cValFalseKeyword_0_0_1 = (Keyword)cValAlternatives_0_0.eContents().get(1);
		private final Assignment cVarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarVariableBooleeneParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cExp1Assignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExp1ExpressionNumeriqueParserRuleCall_2_0_0 = (RuleCall)cExp1Assignment_2_0.eContents().get(0);
		private final Assignment cCompAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCompComparateurParserRuleCall_2_1_0 = (RuleCall)cCompAssignment_2_1.eContents().get(0);
		private final Assignment cExp2Assignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExp2ExpressionNumeriqueParserRuleCall_2_2_0 = (RuleCall)cExp2Assignment_2_2.eContents().get(0);
		
		//Booleen:
		//	val=('true' | 'false') | var=VariableBooleene | exp1=ExpressionNumerique comp=Comparateur exp2=ExpressionNumerique;
		@Override public ParserRule getRule() { return rule; }
		
		//val=('true' | 'false') | var=VariableBooleene | exp1=ExpressionNumerique comp=Comparateur exp2=ExpressionNumerique
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//val=('true' | 'false')
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//('true' | 'false')
		public Alternatives getValAlternatives_0_0() { return cValAlternatives_0_0; }
		
		//'true'
		public Keyword getValTrueKeyword_0_0_0() { return cValTrueKeyword_0_0_0; }
		
		//'false'
		public Keyword getValFalseKeyword_0_0_1() { return cValFalseKeyword_0_0_1; }
		
		//var=VariableBooleene
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VariableBooleene
		public RuleCall getVarVariableBooleeneParserRuleCall_1_0() { return cVarVariableBooleeneParserRuleCall_1_0; }
		
		//exp1=ExpressionNumerique comp=Comparateur exp2=ExpressionNumerique
		public Group getGroup_2() { return cGroup_2; }
		
		//exp1=ExpressionNumerique
		public Assignment getExp1Assignment_2_0() { return cExp1Assignment_2_0; }
		
		//ExpressionNumerique
		public RuleCall getExp1ExpressionNumeriqueParserRuleCall_2_0_0() { return cExp1ExpressionNumeriqueParserRuleCall_2_0_0; }
		
		//comp=Comparateur
		public Assignment getCompAssignment_2_1() { return cCompAssignment_2_1; }
		
		//Comparateur
		public RuleCall getCompComparateurParserRuleCall_2_1_0() { return cCompComparateurParserRuleCall_2_1_0; }
		
		//exp2=ExpressionNumerique
		public Assignment getExp2Assignment_2_2() { return cExp2Assignment_2_2; }
		
		//ExpressionNumerique
		public RuleCall getExp2ExpressionNumeriqueParserRuleCall_2_2_0() { return cExp2ExpressionNumeriqueParserRuleCall_2_2_0; }
	}
	public class BooleanContraireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.BooleanContraire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBooleenParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BooleanContraire:
		//	'!' Booleen;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' Booleen
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//Booleen
		public RuleCall getBooleenParserRuleCall_1() { return cBooleenParserRuleCall_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.RulesUNO.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionBooleeneParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDeclarationAlorsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDeclarationAlorsDeclarationParserRuleCall_5_0 = (RuleCall)cDeclarationAlorsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDeclarationSinonAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDeclarationSinonDeclarationParserRuleCall_7_2_0 = (RuleCall)cDeclarationSinonAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Condition:
		//	'if' '(' ExpressionBooleene ')' '{' declarationAlors+=Declaration* '}' ('else' '{' declarationSinon+=Declaration*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' ExpressionBooleene ')' '{' declarationAlors+=Declaration* '}' ('else' '{' declarationSinon+=Declaration* '}')?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//ExpressionBooleene
		public RuleCall getExpressionBooleeneParserRuleCall_2() { return cExpressionBooleeneParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//declarationAlors+=Declaration*
		public Assignment getDeclarationAlorsAssignment_5() { return cDeclarationAlorsAssignment_5; }
		
		//Declaration
		public RuleCall getDeclarationAlorsDeclarationParserRuleCall_5_0() { return cDeclarationAlorsDeclarationParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
		
		//('else' '{' declarationSinon+=Declaration* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'else'
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//declarationSinon+=Declaration*
		public Assignment getDeclarationSinonAssignment_7_2() { return cDeclarationSinonAssignment_7_2; }
		
		//Declaration
		public RuleCall getDeclarationSinonDeclarationParserRuleCall_7_2_0() { return cDeclarationSinonDeclarationParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	
	
	private final UnoElements pUno;
	private final ParticipantTypeElements pParticipantType;
	private final NbJoueurElements pNbJoueur;
	private final VariantesElements pVariantes;
	private final DeclarationElements pDeclaration;
	private final ReglesElements pRegles;
	private final AffectationElements pAffectation;
	private final InstructionElements pInstruction;
	private final InstructionsBlocElements pInstructionsBloc;
	private final InstructionChoixElements pInstructionChoix;
	private final VariableNumeriqueElements pVariableNumerique;
	private final VariableBooleeneElements pVariableBooleene;
	private final VarianteElements pVariante;
	private final MancheElements pManche;
	private final AttributMancheElements pAttributManche;
	private final ActionMancheElements pActionManche;
	private final JoueurElements pJoueur;
	private final ActionJoueurElements pActionJoueur;
	private final AttributJoueurElements pAttributJoueur;
	private final ParticipantElements pParticipant;
	private final ActionParticipantElements pActionParticipant;
	private final AttributParticipantElements pAttributParticipant;
	private final ActionElements pAction;
	private final AttributElements pAttribut;
	private final OperateurElements pOperateur;
	private final ComparateurElements pComparateur;
	private final LogiqueElements pLogique;
	private final ExpressionNumeriqueElements pExpressionNumerique;
	private final ExpressionBooleeneElements pExpressionBooleene;
	private final EntierElements pEntier;
	private final BooleenElements pBooleen;
	private final BooleanContraireElements pBooleanContraire;
	private final ConditionElements pCondition;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RulesUNOGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUno = new UnoElements();
		this.pParticipantType = new ParticipantTypeElements();
		this.pNbJoueur = new NbJoueurElements();
		this.pVariantes = new VariantesElements();
		this.pDeclaration = new DeclarationElements();
		this.pRegles = new ReglesElements();
		this.pAffectation = new AffectationElements();
		this.pInstruction = new InstructionElements();
		this.pInstructionsBloc = new InstructionsBlocElements();
		this.pInstructionChoix = new InstructionChoixElements();
		this.pVariableNumerique = new VariableNumeriqueElements();
		this.pVariableBooleene = new VariableBooleeneElements();
		this.pVariante = new VarianteElements();
		this.pManche = new MancheElements();
		this.pAttributManche = new AttributMancheElements();
		this.pActionManche = new ActionMancheElements();
		this.pJoueur = new JoueurElements();
		this.pActionJoueur = new ActionJoueurElements();
		this.pAttributJoueur = new AttributJoueurElements();
		this.pParticipant = new ParticipantElements();
		this.pActionParticipant = new ActionParticipantElements();
		this.pAttributParticipant = new AttributParticipantElements();
		this.pAction = new ActionElements();
		this.pAttribut = new AttributElements();
		this.pOperateur = new OperateurElements();
		this.pComparateur = new ComparateurElements();
		this.pLogique = new LogiqueElements();
		this.pExpressionNumerique = new ExpressionNumeriqueElements();
		this.pExpressionBooleene = new ExpressionBooleeneElements();
		this.pEntier = new EntierElements();
		this.pBooleen = new BooleenElements();
		this.pBooleanContraire = new BooleanContraireElements();
		this.pCondition = new ConditionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.RulesUNO".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Uno:
	//	'RUno' '{' nbJoueur=NbJoueur participantType=ParticipantType variantes=Variantes regles=Regles? '}';
	public UnoElements getUnoAccess() {
		return pUno;
	}
	
	public ParserRule getUnoRule() {
		return getUnoAccess().getRule();
	}
	
	//ParticipantType:
	//	'participant' '=' id=('EQUIPE' | 'JOUEUR') ';';
	public ParticipantTypeElements getParticipantTypeAccess() {
		return pParticipantType;
	}
	
	public ParserRule getParticipantTypeRule() {
		return getParticipantTypeAccess().getRule();
	}
	
	//NbJoueur:
	//	'nb_joueur' '=' val=INT ';';
	public NbJoueurElements getNbJoueurAccess() {
		return pNbJoueur;
	}
	
	public ParserRule getNbJoueurRule() {
		return getNbJoueurAccess().getRule();
	}
	
	//Variantes:
	//	{Variantes} 'variantes' '{' (variantes+=Variante (',' variantes+=Variante)*)? '}';
	public VariantesElements getVariantesAccess() {
		return pVariantes;
	}
	
	public ParserRule getVariantesRule() {
		return getVariantesAccess().getRule();
	}
	
	//Declaration:
	//	Instruction | Condition | Affectation;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//Regles:
	//	{Regles} 'regles' '{' declarations+=Declaration* '}';
	public ReglesElements getReglesAccess() {
		return pRegles;
	}
	
	public ParserRule getReglesRule() {
		return getReglesAccess().getRule();
	}
	
	//Affectation:
	//	attribut=Attribut '=' expression=ExpressionNumerique ';';
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}
	
	//Instruction:
	//	InstructionsBloc | Action ';';
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//InstructionsBloc:
	//	InstructionChoix;
	public InstructionsBlocElements getInstructionsBlocAccess() {
		return pInstructionsBloc;
	}
	
	public ParserRule getInstructionsBlocRule() {
		return getInstructionsBlocAccess().getRule();
	}
	
	//InstructionChoix:
	//	'choix' '{' instructions+=Instruction instructions+=Instruction* '}';
	public InstructionChoixElements getInstructionChoixAccess() {
		return pInstructionChoix;
	}
	
	public ParserRule getInstructionChoixRule() {
		return getInstructionChoixAccess().getRule();
	}
	
	//VariableNumerique:
	//	var=Attribut;
	public VariableNumeriqueElements getVariableNumeriqueAccess() {
		return pVariableNumerique;
	}
	
	public ParserRule getVariableNumeriqueRule() {
		return getVariableNumeriqueAccess().getRule();
	}
	
	//VariableBooleene:
	//	var=Variante | action=Action;
	public VariableBooleeneElements getVariableBooleeneAccess() {
		return pVariableBooleene;
	}
	
	public ParserRule getVariableBooleeneRule() {
		return getVariableBooleeneAccess().getRule();
	}
	
	//Variante:
	//	'BASE' | 'DEUX_JOUEURS' | 'UNO_CHALENGE' | 'EQUIPE' | 'CARTES_IDENTIQUES' | 'SUITES' | 'ZERO_ECHANGE' |
	//	'ZERO_TOURNANT' | 'ZERO_QUESTION';
	public VarianteElements getVarianteAccess() {
		return pVariante;
	}
	
	public ParserRule getVarianteRule() {
		return getVarianteAccess().getRule();
	}
	
	//Manche:
	//	'MANCHE';
	public MancheElements getMancheAccess() {
		return pManche;
	}
	
	public ParserRule getMancheRule() {
		return getMancheAccess().getRule();
	}
	
	//AttributManche:
	//	'NB_JOUEUR' | 'NB_PARTICIPANT';
	public AttributMancheElements getAttributMancheAccess() {
		return pAttributManche;
	}
	
	public ParserRule getAttributMancheRule() {
		return getAttributMancheAccess().getRule();
	}
	
	//ActionManche:
	//	'FINIR' | 'NOUVELLE';
	public ActionMancheElements getActionMancheAccess() {
		return pActionManche;
	}
	
	public ParserRule getActionMancheRule() {
		return getActionMancheAccess().getRule();
	}
	
	//Joueur:
	//	'JOUEUR_COURRANT' | 'JOUEUR_SUIVANT' | 'JOUEUR_TOUS' | 'JOUEUR_AUTRE' | 'JOUEUR_EXISTE' | 'JOUEUR_SELECTIONNE';
	public JoueurElements getJoueurAccess() {
		return pJoueur;
	}
	
	public ParserRule getJoueurRule() {
		return getJoueurAccess().getRule();
	}
	
	//ActionJoueur:
	//	'CRIER_UNO' |
	//	'JOUER_CARTE_BASE' |
	//	'JOUER_CARTE_JOKER' |
	//	'JOUER_CARTE_INVERSER_SENS' |
	//	'JOUER_CARTE_PASSE_TON_TOUR' |
	//	'JOUER_CARTE_PLUS_2' |
	//	'JOUER_CARTE_PLUS_4' |
	//	'JOUER_PLUSIEURS_CARTES_IDENTIQUES' |
	//	'JOUER_CARTE_ZERO' |
	//	'JOUER_SUITE_DE_CARTES' |
	//	'POSER_QUESTION' |
	//	'REJOUER' |
	//	'PASSER_SON_TOUR' |
	//	'CHANGER_COULEUR' |
	//	'CHOISIR_COULEUR' |
	//	'PIOCHER_2_CARTES' |
	//	'PIOCHER_4_CARTES' |
	//	'INVERSER_SENS' |
	//	'DONNER_CARTES_AU_JOUEUR_SUIVANT' |
	//	'ECHANGER_JEU_AVEC_UN_ADVERSAIRE' |
	//	'REMARQUER_ERREUR_UNO';
	public ActionJoueurElements getActionJoueurAccess() {
		return pActionJoueur;
	}
	
	public ParserRule getActionJoueurRule() {
		return getActionJoueurAccess().getRule();
	}
	
	//AttributJoueur:
	//	'NB_CARTES';
	public AttributJoueurElements getAttributJoueurAccess() {
		return pAttributJoueur;
	}
	
	public ParserRule getAttributJoueurRule() {
		return getAttributJoueurAccess().getRule();
	}
	
	//Participant:
	//	'PARTICIPANT_COURRANT' | 'PARTICIPANT_EXISTE' | 'PARTICIPANT_SELECTIONNE' | 'PARTICIPANT_MIN_POINTS';
	public ParticipantElements getParticipantAccess() {
		return pParticipant;
	}
	
	public ParserRule getParticipantRule() {
		return getParticipantAccess().getRule();
	}
	
	//ActionParticipant:
	//	'GAGNER' | 'PERDRE' | 'ETRE_ELIMINE';
	public ActionParticipantElements getActionParticipantAccess() {
		return pActionParticipant;
	}
	
	public ParserRule getActionParticipantRule() {
		return getActionParticipantAccess().getRule();
	}
	
	//AttributParticipant:
	//	'POINTS';
	public AttributParticipantElements getAttributParticipantAccess() {
		return pAttributParticipant;
	}
	
	public ParserRule getAttributParticipantRule() {
		return getAttributParticipantAccess().getRule();
	}
	
	//Action:
	//	id=Joueur '.' action=ActionJoueur '()' | id=Manche '.' action=ActionManche '()' | id=Participant '.'
	//	action=ActionParticipant '()';
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Attribut:
	//	id=Joueur '.' attribut=AttributJoueur | id=Manche '.' attribut=AttributManche | id=Participant '.'
	//	attribut=AttributParticipant;
	public AttributElements getAttributAccess() {
		return pAttribut;
	}
	
	public ParserRule getAttributRule() {
		return getAttributAccess().getRule();
	}
	
	//Operateur:
	//	'+' | '-' | '%';
	public OperateurElements getOperateurAccess() {
		return pOperateur;
	}
	
	public ParserRule getOperateurRule() {
		return getOperateurAccess().getRule();
	}
	
	//Comparateur:
	//	'>' | '<' | '>=' | '<=' | '==' | '!=';
	public ComparateurElements getComparateurAccess() {
		return pComparateur;
	}
	
	public ParserRule getComparateurRule() {
		return getComparateurAccess().getRule();
	}
	
	//Logique:
	//	'&&' | '||' | '->' | '<->';
	public LogiqueElements getLogiqueAccess() {
		return pLogique;
	}
	
	public ParserRule getLogiqueRule() {
		return getLogiqueAccess().getRule();
	}
	
	//ExpressionNumerique:
	//	exp+=Entier (op+=Operateur exp+=Entier)*;
	public ExpressionNumeriqueElements getExpressionNumeriqueAccess() {
		return pExpressionNumerique;
	}
	
	public ParserRule getExpressionNumeriqueRule() {
		return getExpressionNumeriqueAccess().getRule();
	}
	
	//ExpressionBooleene:
	//	exp+=(Booleen | BooleanContraire) (log+=Logique exp+=(Booleen | BooleanContraire))*;
	public ExpressionBooleeneElements getExpressionBooleeneAccess() {
		return pExpressionBooleene;
	}
	
	public ParserRule getExpressionBooleeneRule() {
		return getExpressionBooleeneAccess().getRule();
	}
	
	//Entier:
	//	val=INT | att=VariableNumerique;
	public EntierElements getEntierAccess() {
		return pEntier;
	}
	
	public ParserRule getEntierRule() {
		return getEntierAccess().getRule();
	}
	
	//Booleen:
	//	val=('true' | 'false') | var=VariableBooleene | exp1=ExpressionNumerique comp=Comparateur exp2=ExpressionNumerique;
	public BooleenElements getBooleenAccess() {
		return pBooleen;
	}
	
	public ParserRule getBooleenRule() {
		return getBooleenAccess().getRule();
	}
	
	//BooleanContraire:
	//	'!' Booleen;
	public BooleanContraireElements getBooleanContraireAccess() {
		return pBooleanContraire;
	}
	
	public ParserRule getBooleanContraireRule() {
		return getBooleanContraireAccess().getRule();
	}
	
	//Condition:
	//	'if' '(' ExpressionBooleene ')' '{' declarationAlors+=Declaration* '}' ('else' '{' declarationSinon+=Declaration*
	//	'}')?;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
