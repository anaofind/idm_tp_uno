/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.mydsl.rulesUNO.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.rulesUNO.BooleanContraire;
import org.xtext.example.mydsl.rulesUNO.Declaration;
import org.xtext.example.mydsl.rulesUNO.ExpressionBooleene;
import org.xtext.example.mydsl.rulesUNO.RulesUNOPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression Booleene</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.rulesUNO.impl.ExpressionBooleeneImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rulesUNO.impl.ExpressionBooleeneImpl#getLog <em>Log</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rulesUNO.impl.ExpressionBooleeneImpl#getDeclarationAlors <em>Declaration Alors</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.rulesUNO.impl.ExpressionBooleeneImpl#getDeclarationSinon <em>Declaration Sinon</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionBooleeneImpl extends ConditionImpl implements ExpressionBooleene
{
  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected EList<BooleanContraire> exp;

  /**
   * The cached value of the '{@link #getLog() <em>Log</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLog()
   * @generated
   * @ordered
   */
  protected EList<String> log;

  /**
   * The cached value of the '{@link #getDeclarationAlors() <em>Declaration Alors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclarationAlors()
   * @generated
   * @ordered
   */
  protected EList<Declaration> declarationAlors;

  /**
   * The cached value of the '{@link #getDeclarationSinon() <em>Declaration Sinon</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclarationSinon()
   * @generated
   * @ordered
   */
  protected EList<Declaration> declarationSinon;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionBooleeneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return RulesUNOPackage.Literals.EXPRESSION_BOOLEENE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BooleanContraire> getExp()
  {
    if (exp == null)
    {
      exp = new EObjectContainmentEList<BooleanContraire>(BooleanContraire.class, this, RulesUNOPackage.EXPRESSION_BOOLEENE__EXP);
    }
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getLog()
  {
    if (log == null)
    {
      log = new EDataTypeEList<String>(String.class, this, RulesUNOPackage.EXPRESSION_BOOLEENE__LOG);
    }
    return log;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Declaration> getDeclarationAlors()
  {
    if (declarationAlors == null)
    {
      declarationAlors = new EObjectContainmentEList<Declaration>(Declaration.class, this, RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_ALORS);
    }
    return declarationAlors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Declaration> getDeclarationSinon()
  {
    if (declarationSinon == null)
    {
      declarationSinon = new EObjectContainmentEList<Declaration>(Declaration.class, this, RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_SINON);
    }
    return declarationSinon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case RulesUNOPackage.EXPRESSION_BOOLEENE__EXP:
        return ((InternalEList<?>)getExp()).basicRemove(otherEnd, msgs);
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_ALORS:
        return ((InternalEList<?>)getDeclarationAlors()).basicRemove(otherEnd, msgs);
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_SINON:
        return ((InternalEList<?>)getDeclarationSinon()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case RulesUNOPackage.EXPRESSION_BOOLEENE__EXP:
        return getExp();
      case RulesUNOPackage.EXPRESSION_BOOLEENE__LOG:
        return getLog();
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_ALORS:
        return getDeclarationAlors();
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_SINON:
        return getDeclarationSinon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case RulesUNOPackage.EXPRESSION_BOOLEENE__EXP:
        getExp().clear();
        getExp().addAll((Collection<? extends BooleanContraire>)newValue);
        return;
      case RulesUNOPackage.EXPRESSION_BOOLEENE__LOG:
        getLog().clear();
        getLog().addAll((Collection<? extends String>)newValue);
        return;
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_ALORS:
        getDeclarationAlors().clear();
        getDeclarationAlors().addAll((Collection<? extends Declaration>)newValue);
        return;
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_SINON:
        getDeclarationSinon().clear();
        getDeclarationSinon().addAll((Collection<? extends Declaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case RulesUNOPackage.EXPRESSION_BOOLEENE__EXP:
        getExp().clear();
        return;
      case RulesUNOPackage.EXPRESSION_BOOLEENE__LOG:
        getLog().clear();
        return;
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_ALORS:
        getDeclarationAlors().clear();
        return;
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_SINON:
        getDeclarationSinon().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case RulesUNOPackage.EXPRESSION_BOOLEENE__EXP:
        return exp != null && !exp.isEmpty();
      case RulesUNOPackage.EXPRESSION_BOOLEENE__LOG:
        return log != null && !log.isEmpty();
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_ALORS:
        return declarationAlors != null && !declarationAlors.isEmpty();
      case RulesUNOPackage.EXPRESSION_BOOLEENE__DECLARATION_SINON:
        return declarationSinon != null && !declarationSinon.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (log: ");
    result.append(log);
    result.append(')');
    return result.toString();
  }

} //ExpressionBooleeneImpl
